%% output
  Compile functions into stack machine code.
  Declare before use, no parameters, no local variables.
  Note that the program contains all semantic errors.
%% program
  var a, a;
  function undefined;
  function a;
  function g begin g = 1 end;
  function f begin f = 2; g = 3; v = 4 end;
  function v;
  function f begin
    return;
    v = 5; v; undef; f = 6
  end;
  function g;
%% grammar
  prog: [ vars ] funs;
  vars: 'var' names ';';
  names: Name [{ ',' Name }];
  funs: { fun };
  fun: head [ 'begin' stmts 'end' ] ';';
  head: 'function' Name;
  stmts: stmt [{ ';' stmt }];
  stmt: assign | print | return | loop | select;
  assign: Name [ '=' sum ];
  print: 'print' sums;
  sums: sum [{ ',' sum }];
  return: 'return' [ sum ];
  loop: While cmp Do stmts 'od';
  While: 'while';
  Do: 'do';
  select: 'if' cmp Then stmts [ Else stmts ] 'fi';
  Then: 'then';
  Else: 'else';
  cmp: sum rel;
  rel: eq | ne | gt | ge | lt | le;
  eq: '=' sum;
  ne: '<>' sum;
  gt: '>' sum;
  ge: '>=' sum;
  lt: '<' sum;
  le: '<=' sum;   
  sum: product [{ add | subtract }];
  add: '+' product;
  subtract: '-' product;
  product: signed [{ multiply | divide }];
  multiply: '*' signed;
  divide: '/' signed;
  signed: [ '-' ] term;
  term: input | number | name | '(' sum ')';
  input: 'input' [ Number ];
  number: Number;
  name: Name;
%% tokens
  { Number: /0|[1-9][0-9]*/, Name: /[a-z]+/ }
%% actions
  Seven.Functions04
