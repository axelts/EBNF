%% output
  Compile functions into stack machine code.
  Parameters and local variables, declare before use.
  Note that the program contains all semantic errors.
%% program
  var f, dup, dup;
  function undefined ();
  function a ();
  function a (dup) begin var dup; dup = 1 end;
  function a (x) begin var y; y = 1 end;
  function b () begin b = 2 end;
  function f () begin f = 3; g = 4 end;
  function main () begin
    a();
    a = 5;
    undef();
    dup()
  end;
%% grammar
  prog: [ vars ] funs;
  vars: 'var' names ';';
  names: Name [{ ',' Name }];
  funs: { fun };
  fun: head parms [ block ] ';';
  head: 'function' Name;
  parms: '(' [ names ] ')';
  block: 'begin' [ vars ] stmts 'end';
  stmts: stmt [{ ';' stmt }];
  stmt: assign | print | return | loop | select;
  assign: symbol action;
  action: store | call;
  store: '=' sum;
  call: args;
  args: '(' [ sums ] ')';
  print: 'print' sums;
  sums: sum [{ ',' sum }];
  return: 'return' [ sum ];
  loop: While cmp Do stmts 'od';
  While: 'while';
  Do: 'do';
  select: 'if' cmp Then stmts [ Else stmts ] 'fi';
  Then: 'then';
  Else: 'else';
  cmp: sum rel;
  rel: eq | ne | gt | ge | lt | le;
  eq: '=' sum;
  ne: '<>' sum;
  gt: '>' sum;
  ge: '>=' sum;
  lt: '<' sum;
  le: '<=' sum;   
  sum: product [{ add | subtract }];
  add: '+' product;
  subtract: '-' product;
  product: signed [{ multiply | divide }];
  multiply: '*' signed;
  divide: '/' signed;
  signed: [ '-' ] term;
  term: input | number | name | '(' sum ')';
  input: 'input' [ Number ];
  number: Number;
  name: symbol [ args ];
  symbol: Name;
%% tokens
  { Number: /0|[1-9][0-9]*/, Name: /[a-z]+/ }
%% actions
  Seven.Parameters06
