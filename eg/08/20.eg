%% output
  Compile nested first-order functions into stack machine code.
  Local variables, blocks. Declare before use. Dynamic memory management.
      
  Evaluating an arithmetic expression [uses 8/18, extends 8/19].
  Currying and cascaded function calls.
  
  Output:  -1.5 -6 12
%% program
  type f  (number): number,
       f2 (number, number): number,
       curry (f2): ff, ff (number): f;

  function add (x, y): f2 begin return x + y end;
  function sub (x, y): f2 begin return x - y end;
  function mul (x, y): f2 begin return x * y end;
  function div (x, y): f2 begin return x / y end;

  function curry (body) begin
    function ff (a) begin
      function f (b) begin f = body(a, b) end;
      ff = f
    end;
    curry = ff 
  end;
  
  function main () begin
    function f (x) begin
      var a: ff, s: ff, m: ff, d: ff;
      a = curry(add); s = curry(sub); m = curry(mul); d = curry(div);
      f = m(
            d(
              a(x)(1)) 
              (s(x)(2)))
            (3)
    end;
    print f(0), f(1), f(3)
  end;
%% grammar
  prog: [ typedcls ] [ vars ] funs;
  typedcls: { 'type' typedcl [{ ',' typedcl }] ';' };
  typedcl: Name '(' [ types ] ')' [ ':' typename ];
  types: typename [{ ',' typename }];
  typename: Name | 'number';
  vars: 'var' varname [{ ',' varname }] ';';
  varname: Name [ ':' type ];
  type: Name | 'number';
  funs: { fun };
  fun: head parms [ block ] ';';
  head: 'function' Name;
  parms: '(' [ names ] ')' [ ':' Name ];
  names: Name [{ ',' Name }];
  block: begin body 'end';
  begin: 'begin';
  body: [ vars ] [ funs ] stmts;
  stmts: stmt [{ ';' stmt }];
  stmt: assign | print | return | block | loop | select;
  assign: symbol action;
  action: store | call;
  store: '=' sum;
  call: { args };
  args: '(' [ sums ] ')';
  print: 'print' sums;
  sums: sum [{ ',' sum }];
  return: 'return' [ sum ];
  loop: While cmp Do body 'od';
  While: 'while';
  Do: 'do';
  select: 'if' cmp then [ else ] 'fi';
  then: Then [ body ];
  else: Else body;
  Then: 'then';
  Else: 'else';
  cmp: sum rel;
  rel: eq | ne | gt | ge | lt | le;
  eq: '=' sum;
  ne: '<>' sum;
  gt: '>' sum;
  ge: '>=' sum;
  lt: '<' sum;
  le: '<=' sum;   
  sum: product [{ add | subtract }];
  add: '+' product;
  subtract: '-' product;
  product: signed [{ multiply | divide }];
  multiply: '*' signed;
  divide: '/' signed;
  signed: [ '-' ] term;
  term: input | number | name | '(' sum ')';
  input: 'input' [ Number ];
  number: Number;
  name: symbol [{ args }];
  symbol: Name;
%% tokens
  { Number: /0|[1-9][0-9]*/, Name: /[a-zA-Z][a-zA-Z0-9]*/ }
%% actions
  Eight.First14(Eight.Global01(Seven.Nest13(Seven.Blocks09)))
