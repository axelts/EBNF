%% output
  Compile global first-order functions into stack machine code.
  Local variables, blocks. Declare before use.
    
  Exhibit semantic errors [see 07/07].
%% program
  type F (), G(number), H(): number, aa(number, number): bb, bb(number): cc, cc(): H;
  
  var f, dup, dup;
  
  function undefined (): Undefined;
  function a (): F;
  function a (dup): G begin var dup; dup = 1 end;
  function a (x): G begin var y; y = 1 end;
  function b (): H begin b = 2 end;
  function f (): H begin f = 3; g = 4 end;

  function cc () begin return b end;
  function bb (x) begin return cc end;
  function aa (x, y) begin return bb end;

  function main () begin
    a(); 
    a = 5;
    b = 5;
    undef(); 
    dup();
    dup = aa(1,2)(3)()();
    dup = aa(1,2)(3)();
    aa();
    aa(4,5)();
    aa(5,6)(7)(8)
  end;
%% grammar
  prog: [ typedcls ] [ vars ] funs;
  typedcls: { 'type' typedcl [{ ',' typedcl }] ';' };
  typedcl: Name '(' [ types ] ')' [ ':' typename ];
  types: typename [{ ',' typename }];
  typename: Name | 'number';
  vars: 'var' varname [{ ',' varname }] ';';
  varname: Name [ ':' type ];
  type: Name | 'number';
  funs: { fun };
  fun: head parms [ block ] ';';
  head: 'function' Name;
  parms: '(' [ names ] ')' [ ':' Name ];
  names: Name [{ ',' Name }];
  block: begin [ vars ] stmts 'end';
  begin: 'begin';
  stmts: stmt [{ ';' stmt }];
  stmt: assign | print | return | block | loop | select;
  assign: symbol action;
  action: store | call;
  store: '=' sum;
  call: { args };
  args: '(' [ sums ] ')';
  print: 'print' sums;
  sums: sum [{ ',' sum }];
  return: 'return' [ sum ];
  loop: While cmp Do [ vars ] stmts 'od';
  While: 'while';
  Do: 'do';
  select: 'if' cmp then [ else ] 'fi';
  then: Then [ [ vars ] stmts ];
  else: Else [ vars ] stmts;
  Then: 'then';
  Else: 'else';
  cmp: sum rel;
  rel: eq | ne | gt | ge | lt | le;
  eq: '=' sum;
  ne: '<>' sum;
  gt: '>' sum;
  ge: '>=' sum;
  lt: '<' sum;
  le: '<=' sum;   
  sum: product [{ add | subtract }];
  add: '+' product;
  subtract: '-' product;
  product: signed [{ multiply | divide }];
  multiply: '*' signed;
  divide: '/' signed;
  signed: [ '-' ] term;
  term: input | number | name | '(' sum ')';
  input: 'input' [ Number ];
  number: Number;
  name: symbol [{ args }];
  symbol: Name;
%% tokens
  { Number: /0|[1-9][0-9]*/, Name: /[A-Za-z]+/ }
%% actions
  Eight.Global01(Seven.Blocks09)
