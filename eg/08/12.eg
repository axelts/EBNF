%% output
  Compile nested first-order functions into stack machine code.
  Local variables, blocks. Declare before use. Functions as parameters only.
  
  Deep nest.

  Expected output:
    1 2 3 4 5 222
    111 6 7 8 223
    0
%% program
  type F (number), G (number, H), H (number): number;

  function x (a, f): G begin
    function y (b): F begin
      function z (c): F begin
        print 111, a, b, c, f(222) end;
      z(b+1) end;
    y(a+1) end;

  function a (a): F begin
    function b (b): F begin
      function c (c): F begin
        function d (d): F begin
          function e (e): H begin
            function f (f): H begin 
              print a, b, c, d, e, f; return f+1 end;
            x(e+1, f) end;
          e(d+1) end;
        d(c+1) end;
      c(b+1) end;
    b(a+1) end;
  
  function main () begin a(1) end;
%% grammar
  prog: [ typedcls ] [ vars ] funs;
  typedcls: { 'type' typedcl [{ ',' typedcl }] ';' };
  typedcl: Name '(' [ types ] ')' [ ':' 'number' ];
  types: typename [{ ',' typename }];
  typename: Name | 'number';
  vars: 'var' varname [{ ',' varname }] ';';
  varname: Name;
  funs: { fun };
  fun: head parms [ block ] ';';
  head: 'function' Name;
  parms: '(' [ names ] ')' [ ':' Name ];
  names: Name [{ ',' Name }];
  block: begin body 'end';
  begin: 'begin';
  body: [ vars ] [ funs ] stmts;
  stmts: stmt [{ ';' stmt }];
  stmt: assign | print | return | block | loop | select;
  assign: symbol action;
  action: store | call;
  store: '=' sum;
  call: args;
  args: '(' [ sums ] ')';
  print: 'print' sums;
  sums: sum [{ ',' sum }];
  return: 'return' [ sum ];
  loop: While cmp Do body 'od';
  While: 'while';
  Do: 'do';
  select: 'if' cmp then [ else ] 'fi';
  then: Then [ body ];
  else: Else body;
  Then: 'then';
  Else: 'else';
  cmp: sum rel;
  rel: eq | ne | gt | ge | lt | le;
  eq: '=' sum;
  ne: '<>' sum;
  gt: '>' sum;
  ge: '>=' sum;
  lt: '<' sum;
  le: '<=' sum;   
  sum: product [{ add | subtract }];
  add: '+' product;
  subtract: '-' product;
  product: signed [{ multiply | divide }];
  multiply: '*' signed;
  divide: '/' signed;
  signed: [ '-' ] term;
  term: input | number | name | '(' sum ')';
  input: 'input' [ Number ];
  number: Number;
  name: symbol [ args ];
  symbol: Name;
%% tokens
  { Number: /0|[1-9][0-9]*/, Name: /[A-Za-z]+/ }
%% actions
  Eight.Pass08(Eight.Global01(Seven.Nest13(Seven.Blocks09)))
